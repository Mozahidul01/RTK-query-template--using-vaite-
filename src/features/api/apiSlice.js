import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Define the apiSlice using createApi from reduxjs/toolkit
export const apiSlice = createApi({
  // A string value that will be used as a part of the key for the reducer in the store
  reducerPath: "api",
  // The base query object that will be used for every request
  baseQuery: fetchBaseQuery({
    baseUrl: "your base url",
  }),

  // An array of tag names to be used for data invalidation and re-fetching
  tagTypes: ["Names", "Name"],

  // Define the endpoints
  endpoints: (builder) => ({
    // Endpoint for getting data from the server
    getNames: builder.query({
      // The query function that will be used for this endpoint
      query: () => "/query-to-fetch-data",
      // An array of tags that will be used to invalidate and re-fetch data
      providesTags: ["Names"],
    }),

    // Endpoint for getting data with dynamic params from the server
    getName: builder.query({
      // The `id` parameter can be passed as an argument to this query function
      query: ({ id }) => `/query-to-fetch-data/${id}`,
      // An array of tags that will be used to invalidate and re-fetch data
      providesTags: (result, error, arg) => [
        {
          // The type of tag
          type: "Name",
          // The dynamic `id` value that was passed as an argument to the query
          id: arg.id,
        },
      ],
    }),

    // Endpoint for posting data to the server
    postName: builder.mutation({
      // The query function that will be used for this endpoint
      query: (data) => ({
        url: "/query-to-post-data",
        method: "POST",
        body: data,
      }),
      // An array of tags that will be used to invalidate and re-fetch data
      invalidatesTags: ["Names"],
    }),

    // Endpoint for updating data on the server
    patchName: builder.mutation({
      // The query function that will be used for this endpoint
      query: ({ id, data }) => ({
        url: `/query-to-update-data/${id}`,
        method: "PATCH",
        body: data,
      }),
      // An array of tags that will be used to invalidate and re-fetch data
      invalidatesTags: (result, error, arg) => [
        // Invalidate the "Names" query
        "Names",
        {
          // The type of tag
          type: "Name",
          // The dynamic `id` value that was passed as an argument to the query
          id: arg.id,
        },
      ],
    }),

    // Endpoint for deleting data from the server
    deleteName: builder.mutation({
      // The query function that will be used for this endpoint
      query: ({ id }) => ({
        url: `/query-to-delete-data/${id}`,
        method: "DELETE",
      }),
      // An array of tags that will be used to invalidate and re-fetch data
      invalidatesTags: ["Names"],
    }),
  }),
});

// Export all the hooks generated by createApi for each endpoint
export const {
  useGetNamesQuery, // Hook for getting data from the "getNames" endpoint
  useGetNameQuery, // Hook for getting data from the "getName" endpoint
  usePostNameMutation, // Hook for posting data to the "postName" endpoint
  usePatchNameMutation, // Hook for updating data to the "patchName" endpoint
  useDeleteNameMutation, // Hook for Deleting data to the "deleteName" endpoint
} = apiSlice;
